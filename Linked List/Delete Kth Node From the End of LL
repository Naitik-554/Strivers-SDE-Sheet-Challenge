Node* removeKthNode(Node* head, int K)
{
    int n = 0;
    Node* temp = head;
    while(temp != NULL) {
        n++;
        temp = temp->next;
    }
    int find = n-K-1;
    if(find < 0) return head->next;
    Node* back = head;
    Node* front = head;
    while(find--) {
        back = back->next;
    }
    front = back->next;
    back->next = front->next;
    front->next = NULL;

    return head;
}

// Slow Fast Solution

Node* removeKthNode(Node* head, int K)
{
    Node *start = new Node();
    start->next = head;
    Node* fast = start;
    Node* slow = start;

    for(int i=1; i<=K; i++) {
        fast = fast->next;
    }

    while(fast->next != NULL) {
        fast = fast->next;
        slow = slow->next;
    }

    slow->next = slow->next->next;

    return start->next;
}
