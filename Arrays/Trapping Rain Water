// Better

#include <bits/stdc++.h> 
long getTrappedWater(long *arr, int n){
    vector<long> prefixMax(n);
    vector<long> suffixMax(n);
    long ans = 0;
    prefixMax[0] = arr[0];
    for(int i=1; i<n; i++) {
        prefixMax[i] = max(prefixMax[i-1],arr[i]);
    }
    suffixMax[n-1] = arr[n-1];
    for(int i=n-2; i>=0; i--) {
        suffixMax[i] = max(suffixMax[i+1],arr[i]);
    }

    for(int i=0; i<n; i++) {
        ans += (min(prefixMax[i],suffixMax[i]) - arr[i]);
    }

    return ans;
}

// Optimal Soln

#include <bits/stdc++.h> 
long getTrappedWater(long *arr, int n){
    long left = 0, right = n-1;
    long res = 0;
    long leftMax = 0, rightMax = 0;

    while(left <= right) {
        if(arr[left] <= arr[right]) {
            if(arr[left] >= leftMax) leftMax = arr[left];
            else res += leftMax - arr[left];

            left++;
        }
        else {
            if(arr[right] >= rightMax) rightMax = arr[right];
            else res += rightMax - arr[right];

            right--;
        }
    }

    return res;
}
