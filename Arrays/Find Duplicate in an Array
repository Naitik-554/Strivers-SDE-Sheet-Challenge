#include <bits/stdc++.h>

int findDuplicate(vector<int> &arr, int n){
	sort(arr.begin(),arr.end());
	for(int i=0; i<n; i++) {
		if(arr[i] == arr[i+1]) {
			return arr[i];
		}
	}
}

T.C : O(nlogn + n)
S.C : O(1)

// Another soln is having O(n) T.C and O(n) S.C with freq array or map


// Linked List Cycle Detection Method

#include <bits/stdc++.h>

int findDuplicate(vector<int> &arr, int n){
	int slow = arr[0];
	int fast = arr[0];
	do {
		slow = arr[slow];
		fast = arr[arr[fast]];
	} while (slow != fast);

	fast = arr[0];

	while (slow != fast) {
		slow = arr[slow];
		fast = arr[fast];
	}
	
	return slow;
}

T.C : O(n)
S.C : O(1)
